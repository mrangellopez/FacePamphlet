/*
 * File: FacePamphletCanvas.java
 * -----------------------------
 * This class represents the canvas on which the profiles in the social
 * network are displayed.  NOTE: This class does NOT need to update the
 * display when the window is resized.
 */

import acm.graphics.*;

import java.awt.*;
import java.util.*;

public class FacePamphletCanvas extends GCanvas implements
		FacePamphletConstants {

	/**
	 * Constructor This method takes care of any initialization needed for the
	 * display
	 */
	public FacePamphletCanvas() {
		msgLabel = new GLabel(EMPTY_LABEL_TEXT);
		nameLabel = new GLabel(EMPTY_LABEL_TEXT);
		noImageBox = new GRect(IMAGE_WIDTH, IMAGE_HEIGHT);
		image = null;
		initImageBoxAndLabel();
		statusString = "No current status";
		statusLabel = new GLabel(statusString);
	}

	/**
	 * This method displays a message string near the bottom of the canvas.
	 * Every time this method is called, the previously displayed message (if
	 * any) is replaced by the new message text passed in.
	 */
	public void showMessage(String msg) {
		remove(msgLabel);
		msgLabel = new GLabel(msg);
		msgLabel.setFont(MESSAGE_FONT);
		double x = (getWidth() - msgLabel.getWidth()) / 2;
		double y = getHeight() - BOTTOM_MESSAGE_MARGIN;
		add(msgLabel, x, y);
	}

	/**
	 * This method displays the given profile on the canvas. The canvas is first
	 * cleared of all existing items (including messages displayed near the
	 * bottom of the screen) and then the given profile is displayed. The
	 * profile display includes the name of the user from the profile, the
	 * corresponding image (or an indication that an image does not exist), the
	 * status of the user, and a list of the user's friends in the social
	 * network.
	 */
	public void displayProfile(FacePamphletProfile profile) {
		removeAll();
		displayName(profile);
		displayImage(profile);
		displayStatus(profile);
		displayFriends(profile);
	}

	private void displayName(FacePamphletProfile profile) {
		remove(nameLabel);
		String name = profile.getName();
		nameLabel = new GLabel(name);
		nameLabel.setFont(PROFILE_NAME_FONT);
		nameLabel.setColor(Color.BLUE);
		nameLabelY = nameLabel.getAscent() + TOP_MARGIN;
		add(nameLabel, LEFT_MARGIN, nameLabelY);
	}

	private void displayImage(FacePamphletProfile profile) {
		if (image != null)
			remove(image);
		image = profile.getImage();
		imageY = nameLabelY + IMAGE_MARGIN;
		if (image != null) {
			double scaleFactor = 0;
			double sf1 = IMAGE_HEIGHT / image.getHeight();
			double sf2 = IMAGE_WIDTH / image.getWidth();
			if (sf1 < sf2) {
				scaleFactor = sf1;
			} else {
				scaleFactor = sf2;
			}
			image.scale(scaleFactor);
			add(image, LEFT_MARGIN, imageY);
			remove(noImageBox);
			remove(noImageLabel);
		} else {
			add(noImageBox);
			add(noImageLabel);
		}
	}

	private void displayStatus(FacePamphletProfile profile) {
		remove(statusLabel);
		GLabel testLabel = new GLabel("Test label");
		testLabel.setFont(PROFILE_STATUS_FONT);
		double statusY = imageY + IMAGE_HEIGHT + STATUS_MARGIN
				+ testLabel.getAscent();

		statusLabel.setFont(PROFILE_STATUS_FONT);
		String statusStub = profile.getStatus();
		if (!statusStub.isEmpty()) {
			remove(statusLabel);
			String status = new String(profile.getName() + " is ");
			status += statusStub;
			statusLabel = new GLabel(status);
			statusLabel.setFont(PROFILE_STATUS_FONT);
		} else if (statusStub.isEmpty() && statusString == "No current status") {
			statusLabel = new GLabel("No current status");
			statusLabel.setFont(PROFILE_STATUS_FONT);
		}
		add(statusLabel, LEFT_MARGIN, statusY);
	}

	private void displayFriends(FacePamphletProfile profile) {
		GLabel testLabel = new GLabel("Test Label");
		testLabel.setFont(PROFILE_FRIEND_FONT);

		addFriendsLabel();
		Iterator<String> iterator = profile.getFriends();
		double counter = 0;
		while (iterator.hasNext()) {
			double y = imageY + FRIEND_OFFSET + testLabel.getHeight() * counter;
			counter++;
			String friendName = iterator.next();
			GLabel friendNameLabel = new GLabel(friendName, getWidth() / 2, y);
			friendNameLabel.setFont(PROFILE_FRIEND_FONT);
			add(friendNameLabel);
		}

	}

	private void addFriendsLabel() {
		if (friendsLabel != null)
			remove(friendsLabel);
		friendsLabel = new GLabel("Friends:");
		friendsLabel.setLocation(getWidth() / 2, imageY);
		friendsLabel.setFont(PROFILE_FRIEND_LABEL_FONT);
		add(friendsLabel);
	}

	private void initImageBoxAndLabel() {
		GLabel testLabel = new GLabel("Test Label");
		testLabel.setFont(PROFILE_NAME_FONT);
		double boxX = LEFT_MARGIN;
		double boxY = TOP_MARGIN + testLabel.getAscent() + IMAGE_MARGIN;
		noImageBox = new GRect(boxX, boxY, IMAGE_WIDTH, IMAGE_HEIGHT);
		noImageBox.setVisible(true);

		noImageLabel = new GLabel("No Image");
		noImageLabel.setFont(PROFILE_IMAGE_FONT);
		double labelX = (IMAGE_WIDTH - noImageLabel.getWidth()) / 2
				+ LEFT_MARGIN;
		double labelY = boxY + (IMAGE_HEIGHT + noImageLabel.getAscent()) / 2;
		noImageLabel.setLocation(labelX, labelY);
	}

	private double imageY;
	private double nameLabelY;
	private String statusString;
	private GImage image;
	private GLabel msgLabel;
	private GLabel nameLabel;
	private GLabel noImageLabel;
	private GLabel statusLabel;
	private GLabel friendsLabel;
	private GRect noImageBox;

}
